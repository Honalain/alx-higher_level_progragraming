#!/usr/bin/python3

"""
Module: class to protect attributes of class, with setter and getter
"""
from models.base import Base


class Rectangle(Base):

    """
    A Class for Rectangle
    """

    def __init__(self, width, height, x=0, y=0,id=None):
        """
        Initialise a Rectangle instance.
        """

        super().__init__(id)
        self.width = width
        self.height = height
        self.x = x
        self.y = y

    @property
    def width(self):
        """
        Getter for width atrribute
        """

        return self.__width

    @width.setter
    def width(self, value):
        """
        setter for width attribute
        """
        if not isinstance(value, int):
            raise TypeError("Width must be an interger")
        if value <= 0:
            raise ValueError("width must be > 0")
        self.__width = value

    @property
    def height(self):
        """
        Getter for the height attribute.
        """
        return self.__height

    @height.setter
    def height(self, value):
        """
        Setter for the height attribute.
        """
        if not isinstance(value, int):
            raise TypeError("height must be an integer")
        if value <= 0:
            raise ValueError("height value must be > 0")
        self.__height = value

    @property
    def x(self):
        """
        Getter for x attribute.
        """
        return self.__x

    @x.setter
    def x(self, value):

        """
        Setter for the x attribute.
        """
        if not isinstance(value, int):
            raise TypeError("x must be an integer")
        if value < 0:
            raise ValueError("x must be >= 0")
        self.__x = value

    @property
    def y(self):

        """
        Getter for y attribute
        """
        return self.__y

    @y.setter
    def y(self, value):

        """
        setter for y attribute.
        """
        if not isinstance(value, int):
            raise TypeError("y must be an integer")
        if value < 0:
            raise ValueError("y must be >= 0")
        self.__y = value

    def area(self):

        """
        Calculate area of rectangle
        """
        return self.width * self.height

    def display(self):

        """
        Display the rectangle with '#' characters, considering X and y.
        """
        for i in range(self.y):
            print()
        for i in range(self.height):
            print('' * self.x + '#' * self.width)

    def __str__(self):

        """
        Return string representation of the string.
        """
        return "[Rectangle] ({}) {}/{} - {}/{}".format(
                self.id,
                self.x,
                self.y,
                self.width,
                self.height
                )

    def update(self, *args, **kwargs):

        """
        Assign argument to attributes.
        """
        if args:
            for count,arg in enumerate(args):
                if count == 0:
                    self.id = arg
                elif count == 1:
                    self.width = arg
                elif count == 2:
                    self.height = arg
                elif count ==3:
                    self.x = arg
                elif count == 4:
                    self.y = arg
                else:
                    break

        elif len(kwargs) > 0:
            for key, value in kwargs.items():
                if key == "id":
                    self.id = value
                elif key == "width":
                    self.width = value
                elif key == "height":
                    self.height = value
                elif key == "x":
                    self.x = value
                elif key == "y":
                    self.y = value

    def to_dictionary(self):
        """
        represent dictionary format of rectangle
        """
        dict_rect = {
                "id": self.id,
                "width": self.width,
                "height":self.height,
                "x": self.x,
                "y": self.y}
        return dict_rect

    if __name__ == "__main__":
        pass
